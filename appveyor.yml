version: "{branch} {build}"

image: Visual Studio 2017

environment:
  JAVA_HOME: C:\\jdk9
  VCINSTALLDIR: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
  APPVEYOR_CACHE_ENTRY_ZIP_ARGS: "-t7z -m0=lzma -mx=9"

shallow_clone: true

build_script:
  - ps: |
      choco install jdk9 --version 9.0.4.11 -params 'installdir=C:\\jdk9'
      choco install gradle --version 4.3.0
      $msvcToolsVer = Get-Content "$env:VCINSTALLDIR\Microsoft.VCToolsVersion.default.txt"
      if ([string]::IsNullOrWhitespace($msvcToolsVer)) {
        # The MSVC tools version file can have txt *or* props extension.
        $msvcToolsVer = Get-Content "$env:VCINSTALLDIR\Microsoft.VCToolsVersion.default.props"
      }
      $env:MSVC_VER = $msvcToolsVer
      $env:VS150COMNTOOLS = $env:VCINSTALLDIR
      $env:VSVARS32FILE = "$env:VCINSTALLDIR\vcvars32.bat"
      refreshenv
      # Must invoke gradle with cmd.exe so stderr output doesn't fail the build:
  - cmd: gradle test -PCOMPILE_WEBKIT=false --stacktrace -x :web:test --info --no-daemon
on_finish:
  - ps: |
        $crashes = Get-ChildItem -Include hs_err_pid*.log -Recurse
        Write-Output $crashes
        $javaExe = $env:JAVA_HOME + '\bin\java.exe'
        # This could be made much more useful if we had win32 debugging symbols for the JDK.
        # One way to do this would be to build JavaFX with `CONF = DebugNative` set in
        # gradle.properties. This will produce CDB symbol files (because the /Zi argument is
        # passed to the Visual Studio compiler).
        ForEach ($crash in $crashes) {
          $env:Path += ";C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x64\;C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x86\;"
          Write-Host "Printing crash dump (${crash}):"
          Get-Content $crash
          $crashDump = $crash.DirectoryName + '\' + $crash.Basename + '.mdmp'
          cdb -version
          cdb -v -z $crashDump -c '!sym noisy;~*;kb;q' -i $javaExe # -y symbol_path
        }

        # This technically works but is really inefficient as it requires an HTTP request for every
        # single test. Ideally we want to batch the results. We can do this by POSTing to:
        # $APPVEYOR_API_URL/api/tests/batch
        # With JSON body:
        # https://www.appveyor.com/docs/build-worker-api/#rest-3
        # In order to do this we will need to iterate over all the XML files and convert them into
        # a big JSON array.
        Write-Output -Message 'Uploading test results to AppVeyorâ€¦' -Verbose
        $wc = New-Object 'System.Net.WebClient'
        $modules = @("javafx.base", "javafx.graphics", "javafx.controls", "javafx.fxml")
        $ErrorActionPreference = "SilentlyContinue"
        ForEach ($module in $modules) {
          ForEach ($file in Get-ChildItem ".\modules\${module}\build\test-results\test\TEST-*.xml") {
            try {
              $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", $file) 2>&1 | Out-Null
            } catch [System.Net.WebException] {
              # Ignore.
            } finally {
              $ErrorActionPreference = "Continue"
            }
          }
        }

        # Install JDK 10 (for boot JDK)
        # $client = New-Object net.webclient
        # $client.DownloadFile("https://download.java.net/java/jdk10/archive/42/BCL/jdk-10-ea+42_windows-x64_bin.exe", "C:\Users\appveyor\jdk-10.exe")
        # Start-Process "C:\Users\appveyor\jdk-10.exe" -ArgumentList "/s ADDLOCAL=`"ToolsFeature,SourceFeature,PublicjreFeature`" /INSTALLDIR=`"C:\jdk-10`" /L `"C:\Users\appveyor\jdk-10-install.txt`""
  - cmd: |
        REM Currently building OpenJDK exceeds Appveyor's time limits. Keep this around
        REM in case we ever get the proper infrastructure.
        REM hg clone http://hg.openjdk.java.net/jdk/jdk
        REM cd jdk/
        REM C:\cygwin\bin\bash "PATH=/bin:/cygdrive/c/Windows/System32:/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Auxiliary/Build && ./configure --with-import-modules=/cygdrive/c/projects/openjfx/build/modular-sdk --with-boot-jdk=/cygdrive/c/jdk-10"

cache:
  - C:\Users\appveyor\.gradle\caches
  - '%JAVA_HOME% -> appveyor.yml'
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml
